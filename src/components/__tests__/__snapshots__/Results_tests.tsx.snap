// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Results/> renders dummy snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    <div
        className="results__blurb row"
    >
        1
         - 
        2
         of 2
    </div>
    <div
        className="searchResults__result col-xs-12 col-sm-12"
    >
        <pre>
            <code>
                {
                    "key": "foo",
                    "text": "bar"
                }
            </code>
        </pre>
    </div>
    <div
        className="searchResults__result col-xs-12 col-sm-12"
    >
        <pre>
            <code>
                {
                    "key": "fizz",
                    "text": "buzz"
                }
            </code>
        </pre>
    </div>
</div>,
  "nodes": Array [
    <div>
      <div
            className="results__blurb row"
      >
            1
             - 
            2
             of 2
      </div>
      <div
            className="searchResults__result col-xs-12 col-sm-12"
      >
            <pre>
                  <code>
                        {
                            "key": "foo",
                            "text": "bar"
                        }
                  </code>
            </pre>
      </div>
      <div
            className="searchResults__result col-xs-12 col-sm-12"
      >
            <pre>
                  <code>
                        {
                            "key": "fizz",
                            "text": "buzz"
                        }
                  </code>
            </pre>
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <Results
        count={2}
        css={null}
        results={
                Array [
                        Object {
                          "key": "foo",
                          "text": "bar",
                        },
                        Object {
                          "key": "fizz",
                          "text": "buzz",
                        },
                      ]
        }
        skip={0}
        template={null}
        top={50}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Results {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "count": 2,
          "css": null,
          "results": Array [
            Object {
              "key": "foo",
              "text": "bar",
            },
            Object {
              "key": "fizz",
              "text": "buzz",
            },
          ],
          "skip": 0,
          "template": null,
          "top": 50,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          <div
                    className="results__blurb row"
          >
                    1
                     - 
                    2
                     of 2
          </div>
          <div
                    className="searchResults__result col-xs-12 col-sm-12"
          >
                    <pre>
                              <code>
                                        {
                                            "key": "foo",
                                            "text": "bar"
                                        }
                              </code>
                    </pre>
          </div>
          <div
                    className="searchResults__result col-xs-12 col-sm-12"
          >
                    <pre>
                              <code>
                                        {
                                            "key": "fizz",
                                            "text": "buzz"
                                        }
                              </code>
                    </pre>
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div>
          <div
                    className="results__blurb row"
          >
                    1
                     - 
                    2
                     of 2
          </div>
          <div
                    className="searchResults__result col-xs-12 col-sm-12"
          >
                    <pre>
                              <code>
                                        {
                                            "key": "foo",
                                            "text": "bar"
                                        }
                              </code>
                    </pre>
          </div>
          <div
                    className="searchResults__result col-xs-12 col-sm-12"
          >
                    <pre>
                              <code>
                                        {
                                            "key": "fizz",
                                            "text": "buzz"
                                        }
                              </code>
                    </pre>
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Results
    count={2}
    css={null}
    results={
        Array [
            Object {
              "key": "foo",
              "text": "bar",
            },
            Object {
              "key": "fizz",
              "text": "buzz",
            },
          ]
    }
    skip={0}
    template={null}
    top={50}
/>,
}
`;
